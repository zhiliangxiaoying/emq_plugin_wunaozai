%% wunaozai.auth.redis.server
{
    mapping, 
    "wunaozai.auth.redis.server", 
    "emq_plugin_wunaozai.server", 
    [
	{default, {"127.0.0.1", 6379}},
	{datatype, [integer, ip, string]}
    ]
}.
%% wunaozai.auth.redis.pool
{
    mapping,
    "wunaozai.auth.redis.pool",
    "emq_plugin_wunaozai.server",
    [
	{default, 8},
	{datatype, integer}
    ]
}.
%% wunaozai.auth.redis.database = 0
{
    mapping,
    "wunaozai.auth.redis.database",
    "emq_plugin_wunaozai.server",
    [
	{default, 0},
	{datatype, integer}
    ]
}.
%% wunaozai.auth.redis.password =
{
    mapping,
    "wunaozai.auth.redis.password",
    "emq_plugin_wunaozai.server",
    [
	{default, ""},
	{datatype, string},
	hidden
    ]
}.
%% translation
{
    translation, 
    "emq_plugin_wunaozai.server",
    fun(Conf) ->
	    {RHost, RPort} =
	    case cuttlefish:conf_get("wunaozai.auth.redis.server", Conf) of
		{Ip, Port} -> {Ip, Port};
		S          -> case string:tokens(S, ":") of
				  [Domain]       -> {Domain, 6379};
				  [Domain, Port] -> {Domain, list_to_integer(Port)}
			      end
	    end,
	    Pool = cuttlefish:conf_get("wunaozai.auth.redis.pool", Conf),
	    Passwd = cuttlefish:conf_get("wunaozai.auth.redis.password", Conf),
	    DB = cuttlefish:conf_get("wunaozai.auth.redis.database", Conf),
	    [{pool_size, Pool},
	     {auto_reconnect, 1},
	     {host, RHost},
	     {port, RPort},
	     {database, DB},
	     {password, Passwd}]
    end
}.



%% wunaozai.auth.redis.auth_cmd = HMGET mqtt_user:%u password
{
    mapping,
    "wunaozai.auth.redis.auth_cmd",
    "emq_plugin_wunaozai.auth_cmd",
    [
	{datatype, string}
    ]
}.
%% wunaozai.auth.redis.password_hash = plain
{
    mapping,
    "wunaozai.auth.redis.password_hash",
    "emq_plugin_wunaozai.password_hash",
    [
	{datatype, string}
    ]
}.
%% wunaozai.auth.redis.super_cmd = HGET mqtt_user:%u is_superuser
{
    mapping,
    "wunaozai.auth.redis.super_cmd",
    "emq_plugin_wunaozai.super_cmd",
    [
	{datatype, string}
    ]
}.
%% wunaozai.auth.redis.acl_cmd = HGETALL mqtt_acl:%u
{
    mapping,
    "wunaozai.auth.redis.acl_cmd",
    "emq_plugin_wunaozai.acl_cmd",
    [
	{datatype, string}
    ]
}.
%%translation
{
    translation, "emq_plugin_wunaozai.password_hash", 
    fun(Conf) ->
	    HashValue = cuttlefish:conf_get("wunaozai.auth.redis.password_hash", Conf),
	    case string:tokens(HashValue, ",") of
		[Hash]           -> list_to_atom(Hash);
		[Prefix, Suffix] -> {list_to_atom(Prefix), list_to_atom(Suffix)};
		[Hash, MacFun, Iterations, Dklen] -> {list_to_atom(Hash), list_to_atom(MacFun), list_to_integer(Iterations), list_to_integer(Dklen)};
		_                -> plain
	    end
    end
}.


%% wunaozai.msg.kafka.server = 127.0.0.1:9092
{
    mapping, 
    "wunaozai.msg.kafka.server", 
    "emq_plugin_wunaozai.kafka", 
    [
	{default, {"127.0.0.1", 9092}},
	{datatype, [integer, ip, string]}
    ]
}.

%% wunaozai.msg.kafka.topic = test
{
    mapping,
    "wunaozai.msg.kafka.topic",
    "emq_plugin_wunaozai.kafka",
    [
	{default, "test"},
	{datatype, string},
	hidden
    ]
}.

%% translation
{
    translation,
    "emq_plugin_wunaozai.kafka",
    fun(Conf) ->
	    {RHost, RPort} = case cuttlefish:conf_get("wunaozai.msg.kafka.server", Conf) of
				 {Ip, Port} -> {Ip, Port};
				 S	    -> case string:tokens(S, ":") of
						   [Domain]	  -> {Domain, 9092};
						   [Domain, Port] -> {Domain, list_to_integer(Port)}
					       end
			     end,
	    Topic = cuttlefish:conf_get("wunaozai.msg.kafka.topic", Conf),
	    [
	     {host, RHost},
	     {port, RPort},
	     {topic, Topic}
	    ]
    end
}.
